# coding: utf-8

"""
    MEO Mm1 AppPkgMgmt API

    Implementation of Mm1.AppPkgm APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from meo_client.configuration import Configuration


class AppPkgInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_pkg_id': 'str',
        'app_d_id': 'str',
        'app_provider': 'str',
        'app_name': 'str',
        'software_images': 'object',
        'onboarding_state': 'OnboardingState',
        'operational_state': 'OperationalState',
        'usage_state': 'UsageState',
        'user_defined_data': 'object'
    }

    attribute_map = {
        'app_pkg_id': 'appPkgId',
        'app_d_id': 'appDId',
        'app_provider': 'appProvider',
        'app_name': 'appName',
        'software_images': 'softwareImages',
        'onboarding_state': 'onboardingState',
        'operational_state': 'operationalState',
        'usage_state': 'usageState',
        'user_defined_data': 'userDefinedData'
    }

    def __init__(self, app_pkg_id=None, app_d_id=None, app_provider=None, app_name=None, software_images=None, onboarding_state=None, operational_state=None, usage_state=None, user_defined_data=None, local_vars_configuration=None):  # noqa: E501
        """AppPkgInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_pkg_id = None
        self._app_d_id = None
        self._app_provider = None
        self._app_name = None
        self._software_images = None
        self._onboarding_state = None
        self._operational_state = None
        self._usage_state = None
        self._user_defined_data = None
        self.discriminator = None

        self.app_pkg_id = app_pkg_id
        self.app_d_id = app_d_id
        self.app_provider = app_provider
        self.app_name = app_name
        self.software_images = software_images
        self.onboarding_state = onboarding_state
        self.operational_state = operational_state
        self.usage_state = usage_state
        if user_defined_data is not None:
            self.user_defined_data = user_defined_data

    @property
    def app_pkg_id(self):
        """Gets the app_pkg_id of this AppPkgInfo.  # noqa: E501


        :return: The app_pkg_id of this AppPkgInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_pkg_id

    @app_pkg_id.setter
    def app_pkg_id(self, app_pkg_id):
        """Sets the app_pkg_id of this AppPkgInfo.


        :param app_pkg_id: The app_pkg_id of this AppPkgInfo.  # noqa: E501
        :type app_pkg_id: str
        """
        if self.local_vars_configuration.client_side_validation and app_pkg_id is None:  # noqa: E501
            raise ValueError("Invalid value for `app_pkg_id`, must not be `None`")  # noqa: E501

        self._app_pkg_id = app_pkg_id

    @property
    def app_d_id(self):
        """Gets the app_d_id of this AppPkgInfo.  # noqa: E501


        :return: The app_d_id of this AppPkgInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_d_id

    @app_d_id.setter
    def app_d_id(self, app_d_id):
        """Sets the app_d_id of this AppPkgInfo.


        :param app_d_id: The app_d_id of this AppPkgInfo.  # noqa: E501
        :type app_d_id: str
        """
        if self.local_vars_configuration.client_side_validation and app_d_id is None:  # noqa: E501
            raise ValueError("Invalid value for `app_d_id`, must not be `None`")  # noqa: E501

        self._app_d_id = app_d_id

    @property
    def app_provider(self):
        """Gets the app_provider of this AppPkgInfo.  # noqa: E501


        :return: The app_provider of this AppPkgInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_provider

    @app_provider.setter
    def app_provider(self, app_provider):
        """Sets the app_provider of this AppPkgInfo.


        :param app_provider: The app_provider of this AppPkgInfo.  # noqa: E501
        :type app_provider: str
        """
        if self.local_vars_configuration.client_side_validation and app_provider is None:  # noqa: E501
            raise ValueError("Invalid value for `app_provider`, must not be `None`")  # noqa: E501

        self._app_provider = app_provider

    @property
    def app_name(self):
        """Gets the app_name of this AppPkgInfo.  # noqa: E501


        :return: The app_name of this AppPkgInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this AppPkgInfo.


        :param app_name: The app_name of this AppPkgInfo.  # noqa: E501
        :type app_name: str
        """
        if self.local_vars_configuration.client_side_validation and app_name is None:  # noqa: E501
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def software_images(self):
        """Gets the software_images of this AppPkgInfo.  # noqa: E501


        :return: The software_images of this AppPkgInfo.  # noqa: E501
        :rtype: object
        """
        return self._software_images

    @software_images.setter
    def software_images(self, software_images):
        """Sets the software_images of this AppPkgInfo.


        :param software_images: The software_images of this AppPkgInfo.  # noqa: E501
        :type software_images: object
        """
        if self.local_vars_configuration.client_side_validation and software_images is None:  # noqa: E501
            raise ValueError("Invalid value for `software_images`, must not be `None`")  # noqa: E501

        self._software_images = software_images

    @property
    def onboarding_state(self):
        """Gets the onboarding_state of this AppPkgInfo.  # noqa: E501


        :return: The onboarding_state of this AppPkgInfo.  # noqa: E501
        :rtype: OnboardingState
        """
        return self._onboarding_state

    @onboarding_state.setter
    def onboarding_state(self, onboarding_state):
        """Sets the onboarding_state of this AppPkgInfo.


        :param onboarding_state: The onboarding_state of this AppPkgInfo.  # noqa: E501
        :type onboarding_state: OnboardingState
        """
        if self.local_vars_configuration.client_side_validation and onboarding_state is None:  # noqa: E501
            raise ValueError("Invalid value for `onboarding_state`, must not be `None`")  # noqa: E501

        self._onboarding_state = onboarding_state

    @property
    def operational_state(self):
        """Gets the operational_state of this AppPkgInfo.  # noqa: E501


        :return: The operational_state of this AppPkgInfo.  # noqa: E501
        :rtype: OperationalState
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this AppPkgInfo.


        :param operational_state: The operational_state of this AppPkgInfo.  # noqa: E501
        :type operational_state: OperationalState
        """
        if self.local_vars_configuration.client_side_validation and operational_state is None:  # noqa: E501
            raise ValueError("Invalid value for `operational_state`, must not be `None`")  # noqa: E501

        self._operational_state = operational_state

    @property
    def usage_state(self):
        """Gets the usage_state of this AppPkgInfo.  # noqa: E501


        :return: The usage_state of this AppPkgInfo.  # noqa: E501
        :rtype: UsageState
        """
        return self._usage_state

    @usage_state.setter
    def usage_state(self, usage_state):
        """Sets the usage_state of this AppPkgInfo.


        :param usage_state: The usage_state of this AppPkgInfo.  # noqa: E501
        :type usage_state: UsageState
        """
        if self.local_vars_configuration.client_side_validation and usage_state is None:  # noqa: E501
            raise ValueError("Invalid value for `usage_state`, must not be `None`")  # noqa: E501

        self._usage_state = usage_state

    @property
    def user_defined_data(self):
        """Gets the user_defined_data of this AppPkgInfo.  # noqa: E501


        :return: The user_defined_data of this AppPkgInfo.  # noqa: E501
        :rtype: object
        """
        return self._user_defined_data

    @user_defined_data.setter
    def user_defined_data(self, user_defined_data):
        """Sets the user_defined_data of this AppPkgInfo.


        :param user_defined_data: The user_defined_data of this AppPkgInfo.  # noqa: E501
        :type user_defined_data: object
        """

        self._user_defined_data = user_defined_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppPkgInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppPkgInfo):
            return True

        return self.to_dict() != other.to_dict()
